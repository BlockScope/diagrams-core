TODO: make this into a proper org-mode outline. :)

* General system architecture

At the package level, the system is composed of layers

User libraries (DFAs, ...) (These can be in a contrib package).
   |
Core DSL
   |
AST
   |
Render plan
   |
Various render backends (Cairo, LaTex, ...)

The idea is that the core DSL will be "semantic" and stable, whereas user-libraries access the AST at their own risk.

* Design and semantics at the DSL-level.

Things are done in term of an opaque type Diagram.

The semantics of this type is something like
type Diagram = Layout Prim
  where 
type Prim = R^2 -> Color
type Layout Prim = [ (Prim, Transformation, Set Name, ...other stuff...) ]

All primitives and all diagram carry an implicit coordinate system (although this will rarely be mentioned explicitly by the user).

To render a diagram, go through the list from left to right, and render the primitives offset by the transformation.

** Key combinators
makeNamedSquare :: Name -> Diagram

e.g. 
  makeNamedSquare "bob"
makes a diagram containing a Square primitive called "bob", as well as a bunch of Point primives called "bob.upper_right_corner" etc for convenience.

combineUsingLinearConstraints :: [Diagram] -> [Constraint] -> Diagram

Where a constraint is 
data Constraint = (:=:) Name Name

Combines all the diagrams by concatenating all the list of primitives left-to-right, adjusting the transformations by adding offsets so that the origins of the named primitives coincide, and generating unique names. The unique names work by adding numerical prefixes, e.g. combining a list of primitives called "bob" and "joe" with a list containing a primitve called "bob" would give names "1.bob", "1.joe", "joe" and "2.bob" but the ambigious name "bob" is dropped.

As another example, 
  sortDiagramBy :: Comparison -> Diagram -> Diagram
would sort the primitives according to some comparison using the "other stuff". This way we can implement z-stacking.

